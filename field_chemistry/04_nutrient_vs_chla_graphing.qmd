---
title: "nutrient vs chla"
format: html
editor: visual
---

# Set Up

This document is to work on graphs related to nutrients from Reservoirs/ Mainstem

```{r}
# Load packages and color palettes
source("field_chemistry/00_colors_and_groups.R")
source("package_loader.R")
# Load data
reservoir_chemistry <- read_feather("data/field_chemistry/cleaned/reservoir_chem_2021_2022.feather")
# Load metadata for units
meta_units_table <- read_csv("data/field_chemistry/Poudre_Portal_Data/Units_Cam_Peak.csv")

```





# Function  
This function takes in two nutrients and graphs them against each other. It also adds a regression line and a color gradient for the contributing area burn intensity.



```{r}
# select only the mainstem reservoirs sites and data after 2020
comparison_plots_df <- filter(reservoir_chemistry, site_code %in% mainstem_Res_only & Year >2020)%>%
#remove spring data
  filter( Date > "2021-05-30")%>%
  # create a month column
  mutate(month = lubridate::month(Date, label = TRUE, abbr = TRUE),
         watershed  = factor(watershed, levels = c("Long Draw Reservoir", 
                             "Joe Wright Reservoir", 
                             "Chambers Reservoir", 
                             "Peterson Reservoir", 
                             "Barnes Meadow Reservoir")))%>%
  # select only the parameters we want to compare and pivot the data longer
  pivot_longer(cols = c(ChlA, Turbidity, TSS, pH,ANC, Na, NH4, K, Mg, Ca, F, Cl, PO4, SO4, SC,NO3, DOC, DTN),names_to = "param", values_to = "value")

# function to graph two nutrients against each other
# nurient_x and nutrient_y are the two nutrients you want to compare

two_nutrient_graph <- function(nutrient_x, nutrient_y){
  # select the units for the x and y axis
  param_label_x <- filter(meta_units_table, Parameters == nutrient_x)%>%
    select(combined)%>%
    pull()
   param_label_y <- filter(meta_units_table, Parameters == nutrient_y)%>%
    select(combined)%>%
    pull()
  
  # create a new dataframe with the two nutrients and pivot the data wider
  wide_comparison_data <- comparison_plots_df%>%
    filter(param %in% c(nutrient_x, nutrient_y))%>%
    pivot_wider(names_from = "param", values_from = "value")%>%
    # pivot the data longer to get them to have values in the two different columns
    pivot_longer(cols = nutrient_x, names_to = "param_x", values_to = "value_x")%>%
    pivot_longer(cols = nutrient_y, names_to = "param_y", values_to = "value_y")
  
  
  nutrient_vs_nutrient <- wide_comparison_data%>%
  ggplot()+
  geom_point(aes(x= value_x, y= value_y, color= Watershed_Level, size = month), alpha = .5)+
  geom_smooth(aes(x= value_x, y= value_y), color = "black", method = "lm", se= F)+
  # size increases as the month increases
  scale_size_manual(values = c(1.5, 3.5 , 5.5 ,7.5 , 9.5, 11))+
  # color gradient for the contributing area burn intensity
  scale_color_gradient2(name="Contributing Area Burn Intensity",low="#56B4E9", mid="#F0E442", high="#D55E00", guide="colourbar", midpoint=0.225, limits=c(0,0.45576),) +
  theme_bw(base_size=15) +
  labs( x = param_label_x, y = param_label_y)
  

  return(nutrient_vs_nutrient)
}


```



# Graphing any nutrient against itself vs nutrients

```{r}

nutrient_list <- meta_units_table%>%
  select(Parameters)%>%
  pull()

# for loop to graph each nutrient against other nutrients
# should not graph against itself
# save each graph as an object named after the nutrient_y and nutrient_x
for (i in nutrient_list){
  for (j in nutrient_list){
    if (i != j){
      assign(paste0(i, "_", j), two_nutrient_graph(i, j))
    }
  }
}

```


```


