---
title: "DO Analysis"
author: "Sam Struthers"
format: html
  self-contained: true
code-fold: true
warning: false
editor: visual
---

## Importing Data

-   pull up libraries

-   pull in location data

-   Pull Mainstem and Reservoir Sensor data

-   Pull field data from handheld sensor

-   Add FCGOV Sensor for correlation

```{r}

library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(scales)
library(corrplot)
library(lubridate)
library(sf)
#library(mapview)       Takes time to load, not using it yet
library(plotly)
library(geomtextpath)
library(dplyr)

setwd("C:/Users/Sam Struthers/OneDrive - Colostate/Cameron_Peak_Fire/CPF_Reservoir_Analysis")


#buffer_sbs <- read_csv('data/sbs_buffer.csv') %>%
 # mutate(Buffer_Level=((Unburned*0)+(V_Low*0.1)+(Low*0.4)+(Moderate*0.7)+(High*1))/(Unburned+V_Low+Low+Moderate+High))

#watershed_sbs <- read_csv('data/sbs_watershed.csv') %>%
 # mutate(Watershed_Level=((Unburned*0)+(V_Low*0.1)+(Low*0.4)+(Moderate*0.7)+(High*1))/(Unburned+V_Low+Low+Moderate+High)) %>% rename(Site_Code=SITE_CODE)

Sites <- read.csv('data/CPF_Sites.csv')

Field_Values <- read.csv("data/FIELD_DO_COND_TEMP.csv")%>%
  mutate(Date = as.Date(Date, format = "%m/%d/%Y"),
         DateTime = as.POSIXct(paste(Date, Time), tz = "", format = "%Y-%m-%d %H:%M"),
         Type = "Handheld",
         Site_Code = Site)%>%
  left_join(select(Sites,c(Site_Code,Lat,Long, Campaign, Type)),by="Site_Code")
#%>%
# force_tz(DateTime,tzone = "UTC")



DO_Sensors <- read.csv("data/RAW_CPF_DO.csv")%>% 
mutate(DateTime =  as_datetime(DT),
       Site_Code = Site, 
       Date = as_date(DateTime),
       Type = "MiniDOT Sensor")%>%
  mutate(Watershed=ifelse(Site_Code %in% c('LNGR','LNGO'),"Long Draw Reservoir",
                   ifelse(Site_Code %in% c('PTRO','PTRR'),'Peterson Reservoir',
                   ifelse(Site_Code %in% c('SLEP','JWC','PNF','PBD', 'PJW','PBR', 'SFM','PSF' ),'CLP Mainstem Canyon',
                   ifelse(Site_Code %in% c('ELC','ARCH', 'LEGC','TIMB' ),'CLP Mainstem Fort Collins',
                   ifelse(Site_Code %in% c('JOEI','JOER'),"Joe Wright Reservoir",
                   ifelse(Site_Code %in% c('CBRI', 'CBRR','CHD'), "Chambers Reservoir",
                   ifelse(Site_Code %in% c('BRNR','BMD'),"Barnes Meadow Reservoir",
                   ifelse(Site_Code %in% c('COMR','COMO','COMI'),"Comanche Reservoir","Hourglass Reservoir"))))))))) %>%
  # left_join(select(buffer_sbs,c(Watershed,Buffer_Level)),by="Watershed") %>%
  #left_join(select(watershed_sbs,c(Site_Code,Watershed_Level)),by="Site_Code") %>%
  left_join(select(Sites,c(Site_Code,Lat,Long, Campaign)),by="Site_Code") %>%
  mutate(Season=ifelse(Date <= "2022-06-09", "SPRING",
                ifelse(Date <= "2022-09-24", "SUMMER", "FALL"))) %>%
  mutate(Status = ifelse(Site_Code %in% c('LNGR','LNGO','JOEI'),"Unburned",
                  ifelse(Site_Code %in% c('COMI','COMR','COMO','HORI','HORR','HORO','PTRR','PTRO','CBRR','CHD','BRNR','BMD'), "Burned",                                                                                                            "Partially Burned"))) %>%
  mutate(Location = ifelse(Site_Code %in% c("LNGR","PTRR","JOER","CBRR","BRNR","COMR","HORR"),"Reservoir",
                      ifelse(Site_Code %in% c('SLEP','JWC','PNF','PBD', 'PJW','PBR', 'SFM','PSF' ), 'Mainstem',
                      ifelse(Site_Code %in% c("LNGO","PTRO","CHD","BMD","HORO","COMO"),"Outflow","Inflow"))))%>%
  filter(Site_Code != "PBR")
#%>%
 # force_tz(DateTime,tzone = "MST")


PBR_DO_10_10_22 <- read.csv("data/PBR_DO_050122_101022.csv")%>%
  transmute(
    DateTime = as.POSIXct(Reading, tz= "", format= "%m/%d/%Y %H:%M"),
    DO_mg_L = Value,
    Quality = Data.Quality, 
    Date = as.Date(DateTime)
  )%>%
  filter(between(DO_mg_L,5,12))

PBR_TEMP_10_10_22 <- read.csv("data/PBR_TEMP_50122_101022.csv")%>%
  transmute(
    DateTime = as.POSIXct(Reading, tz= "", format= "%Y-%m-%d %H:%M:%S"),
    Temp_C = Value,
    Quality = Data.Quality, 
    Date = as.Date(DateTime)
  )



Manners_Bridge_DO_10_10_22 <- read.csv("data/Manners_Bridge_DO_50122_101022.csv")%>%
  transmute(
    DateTime = as.POSIXct(Reading, tz= "", format= "%Y-%m-%d %H:%M:%S"),
    DO_mg_L = Value,
    Quality = Data.Quality, 
    Date = as.Date(DateTime))%>%
   filter(between(DO_mg_L,6,13))


```

## 

## Plotting

First need to look at individual sites to see when sensors were out of the water

### Plotting each sensor compared to PBR or Manners Bridge (City of Fort Collins Sensor)

This will help determine when mainstem sensors were out of the water

```{r}

DO_sensors_DO <- ggplot()+
  geom_line(data = filter(DO_Sensors, Site_Code == "JOEI" |Site_Code == "CBRI" |Site_Code == "CHD" |Site_Code == "JWC") , aes( x= DateTime, y = DO_mgL, group = Site_Code, color = Site_Code))+
geom_line(data = PBR_DO_10_10_22 , aes( x= DateTime, y = DO_mg_L ) ,color = "Black")+
  theme_bw()

ggplotly(DO_sensors_DO)

DO_sensors_temp<- ggplot()+
 geom_line(data = filter(DO_Sensors, Site_Code == "JOEI" |Site_Code == "CBRI" |Site_Code == "CHD" |Site_Code == "JWC" ), aes( x= DateTime, y = Temp_C, group = Site_Code, color = Site_Code))+
geom_line(data = PBR_DO_10_10_22 , aes( x= DateTime, y = DO_mg_L ) ,color = "Black")+
  theme_bw()


ggplotly(DO_sensors_temp)

```

### Cleaning Sensor Data

```{r}

Cleaning_Dates <- read.csv("data/DO_Cleaning_dates.csv")%>%
  mutate(Date_out = as.POSIXct(Date_out, tz= "UTC", format= "%m/%d/%Y %H:%M"),
         Date_in = as.POSIXct(Date_in, tz= "UTC", format= "%m/%d/%Y %H:%M"))




Cleaned_DO_Sensors <- DO_Sensors

for (i in 1:length(Cleaning_Dates$Site_Code)) {
  Cleaned_DO_Sensors <- Cleaned_DO_Sensors%>%
  filter(!(Site_Code ==Cleaning_Dates$Site_Code[i]&
           (DateTime > Cleaning_Dates$Date_out[i] &
              DateTime <Cleaning_Dates$Date_in[i])))

}




  Clean_DO_sensors_DO <- ggplot()+
  geom_line(data = Cleaned_DO_Sensors, aes( x= DateTime, y = DO_mgL, group = Site_Code, color = Site_Code))+
geom_line(data = PBR_DO_10_10_22 , aes( x= DateTime, y = DO_mg_L ) ,color = "Black")+
  theme_bw()


  

Clean_TEMP_sensors <- ggplot()+
  geom_line(data = Cleaned_DO_Sensors, aes( x= DateTime, y = Temp_C, group = Site_Code, color = Site_Code))+
geom_line(data = PBR_TEMP_10_10_22 , aes( x= DateTime, y = Temp_C ) ,color = "Black")+
  theme_bw()

#Temp Plot

ggplotly(Clean_TEMP_sensors)
  
#DO Plot

ggplotly(Clean_DO_sensors_DO)

Clean_concise_DO <- Cleaned_DO_Sensors%>%
  select(
    DateTime,
    Site_Code,
    DO_mgL,
    Temp_C,
    Campaign,
    Lat,
    Long
  )

write.csv(Clean_concise_DO,"data/Clean_CPF_DO_101222.csv")


```

## TO PULL IN Cleaned DO data

```{r}
Cleaned_DO_Sensors <- read.csv("data/Clean_CPF_DO_101222.csv")%>%
  mutate(DateTime = as.POSIXct(DateTime_Correct, tz = "", format = "%m/%d/%Y %H:%M"))


Clean_DO_Graph <- ggplot()+
  geom_smooth(data = Cleaned_DO_Sensors, aes( x= DateTime, y = DO_mgL, group = Site_Code, color = Site_Code))+
geom_smooth(data = PBR_DO_10_10_22 , aes( x= DateTime, y = DO_mg_L ) ,color = "Black")+
  theme_bw()

ggplotly(Clean_DO_Graph)
  
  
```

## Handheld Sensor Data

```{r}
Field_Values_Longer <- Field_Values%>%
  pivot_longer(cols = c(Temp_C,Cond_ms_cm, DO_mg_L),names_to = "Variable", values_to = "Measurement")

#& Campaign == "Mainstem"|
#force_tz(Field_Values$DateTime, tzone = "MST" )



Handheld_graph_Mainstem_RES <- filter(Field_Values_Longer,Site!= "BMD"  & Campaign == "Chambers Complex")%>%
  ggplot(aes(x= Date, y = Measurement, group = Site, colour = Site))+
  geom_point()+
    facet_wrap(~Campaign + Variable , scales = "free_y")

ggplotly(Handheld_graph_Mainstem_RES)



Handheld_and_sensor <- ggplot()+
  geom_point(data= filter(Field_Values, Site!= "BMD" & Campaign == "Chambers Complex" |Campaign == "Mainstem"), aes(x=DateTime, y= DO_mg_L, colour = Site) )+
  geom_line(data = Cleaned_DO_Sensors, aes( x= DateTime, y = DO_mgL, group = Site_Code, color = Site_Code))+
geom_line(data = PBR_DO_10_10_22 , aes( x= DateTime, y = DO_mg_L ) ,color = "Black")+
  theme_bw()

ggplotly(Handheld_and_sensor)

```

### Longitudinal view

Grouped monthly (bc there are fewer datapoints)

```{r}
Field_monthly <- Field_Values%>%
  mutate(Month = month(Date))%>%
  group_by(Month, Site_Code)%>%
  summarise( mean_DO = mean(DO_mg_L,na.rm = TRUE),
             mean_Temp = mean(Temp_C,na.rm = TRUE),
             mean_Cond = mean(Cond_ms_cm,na.rm = TRUE))%>%
  left_join(select(Sites,c(Site_Code,Lat,Long, Campaign, Type)),by="Site_Code")%>%
  mutate(Distance = case_when(Site_Code == 'JOEI' ~ 1,
                              Site_Code == 'JOER' ~ 2,
                              Site_Code == 'CBRI' ~ 3,
                              Site_Code == 'CBRR' ~ 4,
                              Site_Code == 'CHD' ~ 5,
                              Site_Code == 'BRNR' ~ 6,
                              Site_Code == 'BMD' ~ 7,
                              Site_Code == 'JWC' ~ 8,
                              Site_Code == 'LNGR' ~ 9,
                              Site_Code == 'PTRR' ~ 10,
                              Site_Code == 'LNGO' ~ 11,
                              Site_Code == 'PTRO' ~ 12,
                              Site_Code == 'PJW' ~ 13,
                              Site_Code == 'SLEP' ~ 14,
                              Site_Code == 'PBR' ~ 15,
                              Site_Code == 'HORI' ~ 16,
                              Site_Code == 'COMI' ~ 17,
                              Site_Code == 'HORR' ~ 18,
                              Site_Code == 'COMR' ~ 19,
                              Site_Code == 'HORO' ~ 20,
                              Site_Code == 'COMO' ~ 21,
                              Site_Code == 'BEAV' ~ 22,
                              Site_Code == 'SFM' ~ 23,
                              Site_Code == 'PSF' ~ 24,
                              Site_Code == 'PNF' ~ 25,
                              Site_Code == 'PBD' ~ 26
                              ),
         Distance_name = as.character(Distance),
         Month=as.character(Month),
         Month_Name = case_when(
           Month == '8'~ "Aug", 
           Month == '9'~ "Sept", 
           Month == '10' ~ "Oct"
         ))
Distance_levels=c("1", "2", "3","4", "5", "6","7", "8", "9","10", "11", "12","13","14", "15", "16","17", "18", "19","20", "21", "22","23", "24", "25","26")
 







```

#### Graphing

```{r}


Handheld_Monthly_Temp <- filter(Field_monthly, Campaign != "South Fork" & Campaign != "Longdraw"& Site_Code != "BMD" )%>%
  ggplot()+
  geom_point(aes(x= factor(Distance_name,levels = Distance_levels ), y = mean_Temp, shape = Type, color = Month_Name), size = 5, show.legend = FALSE)+
  geom_line(aes(x= factor(Distance_name,levels = Distance_levels ), y = mean_Temp, group = Month, color = Month_Name), size = 1, show.legend = FALSE)+
  geom_point(aes(x= factor(Distance_name,levels = Distance_levels ), y = mean_Temp, shape = Type, color = Month_Name), size = 5, show.legend = FALSE)+
 theme_bw(base_size=24) +
   labs(shape = "", color="") +
  theme(legend.position="none")+
   scale_x_discrete(labels=c("1" = "JOEI","2" = "", "3" = "CBRI","4" = "", "5" = "CHD","6" = "BRNR","8" = "JWC", "13" = "PJW", "14" = "","15" = "PBR", "24" = "PSF","25" = "PNF","26" = "PBD")) +
   #theme(axis.text.x = element_blank()) +
 xlab("Longitudinal Profile") +
   ylab("Temperature (C)")
  
#plot(Handheld_Monthly_Temp)

Handheld_Monthly <- filter(Field_monthly, Campaign != "South Fork" & Campaign != "Longdraw"& Site_Code != "BMD" )%>%
  ggplot()+
  geom_point(aes(x= factor(Distance_name,levels = Distance_levels ), y = mean_DO, shape = Type, color = Month_Name), size = 5)+
  geom_line(aes(x= factor(Distance_name,levels = Distance_levels ), y = mean_DO, group = Month, color = Month_Name), size = 1)+
  geom_point(aes(x= factor(Distance_name,levels = Distance_levels ), y = mean_DO, shape = Type, color = Month_Name), size = 5)+
 theme_bw(base_size=24) +
   labs(shape = "", color="") +
   theme(axis.text.x = element_blank()) +
 xlab("") +
   ylab("DO (mg/L)")

#plot(Handheld_Monthly)

ggarrange(Handheld_Monthly, Handheld_Monthly_Temp, ncol = 1, nrow = 2)

ggsave('data/Handheld_DO_TEMP.jpg', width=13.5, height=10)

```
